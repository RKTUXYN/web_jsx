/**
* Copyright (c) 2018, SOW (https://www.safeonline.world). (https://github.com/RKTUXYN) All rights reserved.
* @author {SOW}
* Copyrights licensed under the New BSD License.
* See the accompanying LICENSE file for terms.
*/
const __is_web = typeof ( this["context"] ) !== 'undefined';
const __worker = {
    print: function ( str ) {
        if ( __is_web ) {
            context.response.write( str );
            return;
        }
        __print( str );
    },
    root_dir: __is_web ? context.root_dir : __root_dir,
    normalize: function normalize( str ) {
        return str.replace( /<!--([\s\S]+?)-->/gi, "" )//replace <!-- --> tag
            .replace( /\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm, "" )//Replace comment
            .replace( /\r\n/gi, "" ).replace( /\n/gi, "" ).replace( /\s+/g, " " );
    },
    http: function () {
        var _http_req;
        return {
            api_info: {},
            auth_cookie: [],
            is_authenticated: false,
            init: function ( api_name ) {
                if ( api_name === 'g' ) {
                    this.api_info = {
                        name: api_name,
                        url: "https://closure-compiler.appspot.com/compile"
                    };
                } else if ( api_name === 'jm' ) {
                    this.api_info = {
                        name: api_name,
                        url: "https://javascript-minifier.com/raw"
                    };
                } else {
                    throw new Error( `Not implemented ${api_name}` );
                }
                _http_req = new ( require( "/addon/http.js", true ) );
                return this;
            },
            header: {
                get: function () {
                    return _http_req.header;
                },
                add: function ( key, value ) {
                    this.remove( key );
                    _http_req.set_header( key, value );
                    return this;
                },
                remove: function ( key ) {
                    _http_req.remove_header( key );
                    return this;
                }
            },
            prepare: function () {
                _http_req.clear_response();
                if ( this.api_info.name === "g" ) {
                    _http_req
                        .set_header( "User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36" )
                        .set_header( "dnt", "1" )
                        .set_header( "Origin", "https://closure-compiler.appspot.com" )
                        .set_header( "Referer", "https://closure-compiler.appspot.com/home" )
                        ;
                    _http_req.set_cookie( "__utmz", '26799087.1545316201.2.2.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided)' );
                    _http_req.set_cookie( "__utmc", '26799087' );
                    _http_req.set_cookie( "__utma", '26799087.1940888468.1545288645.1545817135.1545819523.5' );
                    _http_req.set_cookie( "__utmt", '1' );
                    _http_req.set_cookie( "__utmb", '26799087.2.10.1545819523' );
                }
                _http_req
                    .set_header( "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8" )
                    .set_header( "Accept-Language", "en-US,en;q=0.9,mt;q=0.8" )
                    .set_header( "Accept-Encoding", "gzip" )
                    .set_header( "Content-Type", "application/x-www-form-urlencoded" )
                    ;
                return this;
            },
            dispose: function () {
                _http_req.clear_response();
                _http_req = undefined;
                for ( let p in this )
                    delete this[p];
                return this;
            },
            before_request: function ( type ) {
                if ( type === "WA" ) {
                    _http_req.cookie = this.auth_cookie;
                }
            },
            after_request: function ( type ) {
                if ( type === "A" ) {
                    for ( let row of _http_req.response.cookie ) {
                        this.auth_cookie.push( row.trim() );
                    }
                    _http_req.cookie = [];
                }
            },
            post: function ( body, req ) {
                _http_req.response = {};
                _http_req.url = this.api_info.url;
                this.before_request( req );
                _http_req.post( body );
                //__print(_http_req.form_data);
                if ( _http_req.response.is_error === true ) {
                    return {
                        error_msg: _http_req.response.error,
                        error: true
                    };
                }
                this.after_request( req );
                return {
                    body: _http_req.response.body,
                    error: false,
                    header: _http_req.header
                };
            },
            get: function ( req ) {
                _http_req.response = {};
                _http_req.url = this.api_info.url;
                this.before_request( req );
                _http_req.get();
                if ( _http_req.response.is_error === true ) {
                    return {
                        error_msg: this.http_req.response.error,
                        error: true
                    };
                }
                this.after_request( req );
                return {
                    body: _http_req.response.body,
                    error: false
                };
            },
            clear_response: function () {
                _http_req.response = {};
            },
        };
    }(),
    minify_compaile: function ( task, api_name ) {
        this.http.init( api_name );
        var _param = undefined;
        if ( api_name === "g" ) {
            _param = function () {
                let form_data = [
                    { "output_format": "json" },
                    { "output_info": "compiled_code" },
                    { "output_info": "warnings" },
                    { "output_info": "statistics" },
                    { "compilation_level": "SIMPLE_OPTIMIZATIONS" },
                    { "warning_level": "default" },
                    //{ "output_file_name": "default.js" },
                    { "language_out": "ecmascript5" }
                ];
                let str = [];
                for ( let row of form_data ) {
                    for ( let p in row ) {
                        str.push( encodeURIComponent( p ) + "=" + encodeURIComponent( row[p] ) );
                    }
                }
                return str.join( "&" );
            }();
        }

        return function ( data, path ) {
            this.print( `Commiling ${path}` );
            let resp = undefined;
            if ( api_name === "g" ) {
                resp = this.http.post( `${_param}&js_code=${encodeURIComponent( data )}` );
                data = undefined;
                if ( resp.error ) {
                    //We got crul error.
                    //So we don't like to forward this request !!! :(
                    this.print( resp.error_msg );
                    return undefined;
                }
                try {
                    resp = JSON.parse( resp.body );
                    if ( resp.error ) {
                        this.print( JSON.stringify( resp.error ) );
                        return undefined;
                    }
                    if ( task === "mc_e" ) {
                        let ces = crypto.encrypt_source( resp.compiledCode );
                        if ( ces.staus_code < 0 ) {
                            this.print( ces.msg );
                        }
                        return ces.data;
                    }
                    //this.print( resp.compiledCode );
                    return resp.compiledCode;
                } catch ( e ) {
                    this.print( e.message );
                    this.print( e.stack );
                    return undefined;
                }
            }
            if ( api_name === "jm" ) {
                resp = this.http.post( `input=${encodeURIComponent( data )}` );
                data = undefined;
                if ( resp.error ) {
                    //We got crul error.
                    //So we don't like to forward this request !!! :(
                    this.print( resp.error_msg );
                    return undefined;
                }
                if ( !resp.body || resp.body === undefined ) {
                    this.print( "No response defeind!!!" );
                    return undefined;
                }

                return resp.body;
            }
        };
    },
    default: function () {
        this.Sow = {
            hook: function () {
                return {
                    add: function () {
                        return this;
                    }
                };
            },
            Net: {
                Web: {
                    Page: {
                        Renderer: {
                            registerPage: function () { }
                        }
                    }
                }
            }

        };
        return function ( data ) {
            data = this.normalize( data );
            try {
                eval( data );
                return data;
            } catch ( e ) {
                this.print( "Error:==>" + e.message );
                this.print( e.stack );
                return undefined;
            }
        };
    },
    default_e: function () {
        return function ( data ) {
            let ces = crypto.encrypt_source( this.normalize( data ) );
            if ( ces.staus_code < 0 ) {
                this.print( ces.msg );
            }
            return ces.data;
        };
    },
    write_output: function ( path, task, root_dir ) {
        path = path.replace( /\/\//g, '\\' );
        path = path.replace( root_dir, "" );
        this.print( `Reading file... ${path}` );
        if ( __is_web ) {
            this.print( "---------------------------------------------------\r\n" );
        }
        let resp = fs.read_file( path );
        this.print( resp.message );
        if ( resp.staus_code < 0 ) {
            resp = undefined;
            return;
        }

        if ( __is_web ) {
            this.print( this.normalize( resp.data ) );
            resp = undefined;
            this.print( "---------------------------------------------------\r\n" );
            return;
        }
        this.print( task );
        let data = this[task]( resp.data, path );
        resp = undefined;
        if ( !data ) return;
        this.print( `Writing file... ${path}` );
        //this.print( data );
        let wresp = fs.write_file( path, data );
        //data = undefined;
        this.print( wresp.message );

    },
    get_task: function ( task, api_name ) {
        let original = task;
        switch ( task ) {
            case "mc": task = "minify_compaile"; break;
            case "mc_e": task = "minify_compaile"; break;
            case "m": task = "minify"; break;
            case "d": task = "default"; break;
            case "de": task = "default_e"; break;
            default: throw new Error( `Not implemented ${task}` );
        }
        this[task] = this[task]( original, api_name );
        return task;
    },
    start_async: function ( resp, task ) {
        if ( resp.staus_code < 0 ) {
            this.print( JSON.stringify( resp ) );
        } else {
            for ( let path of resp.dir ) {
                __async( function () {
                    __worker.write_output( path, task, __worker.root_dir );
                } );
                if ( __is_web ) {
                    this.print( "\r\n" );
                }

            }
        }
    },
};
if ( __is_web ) {
    context.response.header( "Content-Type", "text/plain" );
    //context.response.header( "Content-Type", "application/json" );
}
if ( __is_web ) {
    __worker.start_async( fs.read_directory( "view\\s__s\\pages\\", "js" ), __worker.get_task( "d" ) );
} else {
    if ( __arg.length < 4 ) {
        __worker.print( "Argument should have directory and pattern and type!!!" );
        __worker.print( "Directory e.g. view\\imp\\" );
        __worker.print( "Pattern e.g. js" );
        __worker.print( "Compilation type e.g. d (default/inline)" );
        __worker.print( "---------------- e.g. de (default/inline, encrypt)" );
        __worker.print( "---------------- e.g. mc (minify_compaile)" );
        __worker.print( "---------------- e.g. mc_e (minify_compaile_encryption)" );
        __worker.print( "---------------- e.g. m (minify)" );

        __worker.print( "Api Name type e.g. g (https://closure-compiler.appspot.com/compile)" );
        __worker.print( "------------- e.g. jm (https://javascript-minifier.com/raw)" );
    } else {
        let dir = __arg[0].replace( /\//g, '\\' );
        __worker.print( `Reading directory ${dir}` );
        __worker.start_async( fs.read_directory( dir, __arg[1] ), __worker.get_task( __arg[2], __arg[3] ) );
    }
}
