/**
* Copyright (c) 2018, SOW (https://www.safeonline.world). (https://github.com/RKTUXYN) All rights reserved.
* @author {SOW}
* Copyrights licensed under the New BSD License.
* See the accompanying LICENSE file for terms.
*/
//6:00 PM 12/30/2018
var __worker = {
    exec_header: function( html ) {
        let exc = /<head[^>]*>([\s\S]+?)<\/head>/gi.exec( html );
        if ( exc === null ) {
            exc = /<head>([\s\S]+?)<\/head>/gi.exec( html );
            if ( exc === null ) return undefined;
        };
        html = undefined;
        return exc[1];
    },
    get_title: function ( header ) {
        let exc = /<title>([\s\S]+?)<\/title>/gi.exec( header );
        if ( exc === null )
            exc = /<title[^>]*>([\s\S]+?)<\/title>/gi.exec( header );
        if ( exc === null )
            exc = /<title[^>]*>([\s\S]+?)<\/title>/gi.exec( header );
        return exc === null ? undefined : exc[1];
    },
    escape_html: function( unsafe ) {
        return unsafe
            .replace( /&/g, "&amp;" )
            .replace( /</g, "&lt;" )
            .replace( />/g, "&gt;" )
            .replace( /"/g, "&quot;" )
            .replace( /'/g, "&#039;" );
    },
    get_meta: function ( mt ) {
        let resp = {
            type: undefined,
            content: undefined
        };
        //og:description
        if ( /property="og:image"/gi.test( mt ) ) {
            resp.type = "image";
        } else if ( /property="og:description"/gi.test( mt )
            || /name="description"/gi.test( mt )) {
            resp.type = "description";
        } else if ( /property="og:title"/gi.test( mt ) ) {
            resp.type = "title";
        } else {
            return resp;
        }
        let exc = /content="([\s\S]+?)"/.exec( mt );
        if ( exc === null ) return resp;
        resp.content = exc[1];
        return resp;
    },
    get_resp: function ( regx, header, result ) {
        let m = header.match( regx );
        if ( m === null ) return result;
        for ( let p of m ) {
            let resp = this.get_meta( p );
            if ( !resp.type || !resp.content ) continue;
            //if ( result[resp.type] ) continue;
            result[resp.type] = this.escape_html( resp.content );
        }
        return result;
    },
    write_link: function ( url, resp ) {
        let header = ( this.exec_header( ( resp.body ) ) );
        //let title = this.get_title( header );
        let res = this.get_resp( /<meta[^>]*\/>/gi, header, {} );
        res = this.get_resp( /<meta[^>]*>/gi, header, res );
        if ( !res.title )
            res.title = this.get_title( header );
        if ( !res.title )
            res.title = this.get_title( ( resp.body ) );
        if ( !res.title ) {
            context.response.write( JSON.stringify( {
                error: true,
                description: "Nothing found"
            } ) );
            return;
        } else {
            res.title = this.escape_html( res.title );
        }
        if ( res.image ) {
            res.image = res.image.replace( /amp;/gi, "" );
        }
        if ( /https:\/\/www.youtube.com/gi.test( url ) ) {
            try {
                res.description = /document.title =([\s\S]+?);/gi.exec( resp.body )[1];
                res.description = this.escape_html( res.description.replace( /"/gi, "" ) );
            } catch ( e ) {
                //context.response.write( resp.body );
                //return;
                res.description = "";
            }
        } else if ( /https:\/\/en.wikipedia.org/gi.test( url ) ) {
            try {
                let match = resp.body.match( /<p>([\s\S]+?)<\p>/gi );
                if ( match !== null ) {
                    res.description = match[0];///<p>([\s\S]+?)<\/p>/gi.exec( match[1] )[1];
                    if ( res.description.length > 1000 ) {
                        res.description = res.description.substring( 0, 1000 );
                    }
                }
            } catch ( e ) {
                context.response.write( e.message );
                return;
            }
        }
        res.url = url;
        res.error = false;
        context.response.write(
            `<style class="cp-pen-styles">.link-preview .link-area {
              overflow: hidden;
              position: relative;
              margin: 1em 0 1em 0;
              padding: 10px;
              border: 1px #999 solid;
            }
            .link-preview .descriptions {
              overflow: hidden;
            }
            .link-preview .og-title {
              overflow: hidden;
              font-size: 1.2em;
              font-weight: bold;
            }
            .link-preview .og-description {
              font-size: 0.86em;
              margin-top: 0.2em;
            }
            .link-preview .og-image {
              float: left;
              margin-right: 10px;
            }
            .link-preview .og-image img {
              max-width: 125px;
            }
            </style>
        `);
        if ( res.image ) {
            context.response.write( `
                <a href="${url}" class="link-preview">
                  <div class="link-area">
                    <div class="og-image">
                      <img src="${res.image}">
                    </div>
                    <div class="descriptions">
                      <div class="og-title">${res.title}</div>
                      <div class="og-description">${res.description}</div>
                    </div>
                  </div>
                </a>
            `);
            return;
        }
        context.response.write( `
                <a href="${url}" class="link-preview">
                  <div class="link-area">
                    <div class="descriptions">
                      <div class="og-title">${res.title}</div>
                      <div class="og-description">${res.description}</div>
                    </div>
                  </div>
                </a>
            `);
        /*for ( let type in res ) {
            context.response.write( `Type:${type}==>${res[type]}` );
        }*/
    }
};
context.response.header( "Content-Type", "text/html" );
( function () {
    try {
        let url = context.request.query_string.url;
        if ( !url ) {
            context.response.header( "statuse_code", "505" );
            context.response.write( JSON.stringify( {
                error: true,
                description: "url required!!!"
            } ) );
            return;
        }
        let http_request = require( "/addon/http.js", false );
        let http_req = new http_request( url );
        http_req.set_header( "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8" )
            .set_header( "Accept-Language", "en-US,en;q=0.9,mt;q=0.8" )
            .set_header( "User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36" )
            .set_header( "Accept-Encoding", "gzip" )
            .get();
        if ( http_req.response.is_error === true ) {
            context.response.header( "statuse_code", "505" );
            context.response.write( JSON.stringify( {
                error: true,
                description: http_req.response.error
            } ) );
            http_req.clear_response();
            return;
        }
        __worker.write_link( url, http_req.response);
        http_req.clear_response();
    } catch ( ex ) {
        context.response.header( "statuse_code", "505" );
        context.response.write( JSON.stringify( {
            error: true,
            description: ex.message
        } ) );
    }
}() );

